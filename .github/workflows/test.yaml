name: run tests
on:
  push:
    branches:
      - '*'
    paths:
      - 'src/main/python/**'
  pull_request:
    branches:
      - '*'
    paths:
      - 'src/main/python/**'
  workflow_dispatch:
    branches:
      - '*'
defaults:
  run:
    shell: bash
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-18.04, ubuntu-20.04, macos-10.15, windows-2019 ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install -d
          if [[ "$RUNNER_OS" == "Windows" ]]
          then
            pipenv run pip install -Iv numpy==1.19.3
          fi
          pip list
          pipenv run pip list
      - name: pytest
        run: |
          PYTHONPATH=./src/main/python pipenv run pytest --cov=./src/main/python
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
      - name: Install packaging dependencies
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]
          then
            sudo apt install -y libblas-dev liblapack-dev libsndfile1 graphviz
            sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0 libxcb-util1 libxcb-xkb1
          elif [[ "$RUNNER_OS" == "Windows" ]]
          then
            choco install openssl.light graphviz
          elif [[ "$RUNNER_OS" == "macOS" ]]
          then
            brew install graphviz
            brew ls -v graphviz
          fi
          pipenv run pip install pyinstaller
      - name: Get version
        id: get_version
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - name: Append version
        run: |
          echo ${{ steps.get_version.outputs.sha_short }} > src/main/python/VERSION
      - name: Create distribution
        run: |
          export QT_DEBUG_PLUGINS=1
          export DISPLAY=:0
          sudo /usr/bin/Xvfb $DISPLAY -screen 0 1280x1024x24 &
          pipenv run pyinstaller --clean --log-level=INFO beqdesigner.spec
          if [[ "$RUNNER_OS" == "macOS" ]]
          then
            pushd dist
            rm beqdesigner
            zip -r beqdesigner.app.${{ matrix.os }}.zip beqdesigner.app
            rm -Rf beqdesigner.app
            popd
          fi
      - name: Archive app binaries
        uses: actions/upload-artifact@v2
        with:
          name: beqdesigner-apps
          path: |
            dist/beqdesigner.exe
            dist/beqdesigner*.zip
            dist/beqdesigner_*
          retention-days: 1
